// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "fullTextSearch", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id             String          @id @default(uuid()) @db.Uuid
  name           String          @unique @db.Text
  phoneNumber    String          @unique @db.Text
  password       String          @db.Text
  canOperates    CanOperate[]
  postOperations PostOperation[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
}

model Channel {
  id                 String       @id @default(uuid()) @db.Uuid
  idInSocial         String
  link               String       @unique @db.Text
  title              String       @db.Text
  description        String       @db.Text
  lastPostIdInSocial String?       @db.Text
  availableReactions String[]
  posts              Post[]
  canOperates        CanOperate[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @default(now())
}

model CanOperate {
  id         String   @id @default(uuid()) @db.Uuid
  channel    Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId  String   @db.Uuid
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId  String   @db.Uuid
  canReact   Boolean
  canComment Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Post {
  id             String          @id @default(uuid()) @db.Uuid
  idInSocial     String
  channel        Channel         @relation(fields: [channelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  channelId      String          @db.Uuid
  msg            String          @db.Text
  socialCreationDate DateTime
  isPropagandaPredicted Boolean
  isPropaganda Boolean? 
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  postOperations PostOperation[]
}

model PostOperation {
  id        String   @id @default(uuid()) @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String   @db.Uuid
  account   Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId String?   @db.Uuid
  reaction  String?  @db.Text
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
